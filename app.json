[{"name": "app.py", "content": "import time\nfrom shiny import App, ui, reactive\nimport numpy as np\nfrom fcn_thelen_opt import thelen_muscle_opt\nfrom fcn_thelen_muscle import thelen_muscle\n\n# Define the UI with buttons for different stages\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        # Inputs for stage 1 (basic inputs)\n        ui.input_slider(\"force\", \"Force\", 0, 100, 50),\n        ui.input_slider(\"frequency\", \"Frequency\", 1, 10, 5),\n        ui.input_slider(\"excursion\", \"Excursion\", 1, 100, 50),\n        ui.input_slider(\"L0\", \"Muscle Length (L0)\", 1, 10, 5),\n        ui.input_slider(\"F0\", \"Muscle Force (F0)\", 1, 100, 50),\n        ui.input_slider(\"Vx\", \"Velocity Constant (Vx)\", 1, 10, 5),\n        ui.input_slider(\"af\", \"Activation Function (af)\", 0.1, 2.0, 1.0),\n        ui.input_slider(\"tau_a\", \"Activation Time Constant (tau_a)\", 1, 100, 50),\n        ui.input_slider(\"tau_d\", \"Deactivation Time Constant (tau_d)\", 1, 100, 50),\n        \n        # Buttons to trigger different stages\n        ui.input_action_button(\"stage1\", \"Start Optimization\"),  # Stage 1: Start optimization\n        ui.input_action_button(\"stage2\", \"Generate Plot & Table\")  # Stage 2: Plot and table generation\n    ),\n    # Output areas for stages\n    ui.output_text_verbatim(\"timingInfo\"),  # Stage 1: Timing info\n    ui.output_plot(\"musclePlot\"),  # Stage 2: Plot\n    ui.output_table(\"muscleTable\")  # Stage 2: Table\n)\n\n# Define the Server logic\ndef server(input, output, session):\n    timing_logs = []\n    optimization_results = {}\n\n    # Stage 1: Start Optimization\n    @reactive.Effect\n    def start_optimization():\n        nonlocal timing_logs, optimization_results\n\n        if input.stage1():  # Trigger when 'Start Optimization' is pressed\n            timing_logs = []  # Clear previous logs\n            start_time = time.time()\n\n            optimization_results = thelen_muscle_opt(\n                onoff=(20, 75),\n                freq=input.frequency(),\n                excursion=input.excursion(),\n                L0=input.L0(),\n                F0=input.F0(),\n                Vx=input.Vx(),\n                af=input.af(),\n                tau_a=input.tau_a(),\n                tau_d=input.tau_d(),\n                path=\"a\"\n            )\n\n            end_time = time.time()\n            timing_logs.append(f\"Optimization completed in: {end_time - start_time:.4f} seconds\")\n\n    # Stage 2: Generate Plot and Table (after optimization)\n    @reactive.Effect\n    def generate_plot_table():\n        nonlocal optimization_results\n\n        if input.stage2():  # Trigger when 'Generate Plot & Table' is pressed\n            if optimization_results:\n                output.musclePlot = generate_plot(optimization_results)\n                output.muscleTable = generate_table(optimization_results)\n\n    # Output the timing information for stage 1\n    @output\n    @reactive.text\n    def timingInfo():\n        return \"\\n\".join(timing_logs)\n\n# Functions to generate the plot and table for stage 2\ndef generate_plot(results):\n    # Placeholder for plotting logic, e.g., using matplotlib or plotly\n    return results  # Replace with actual plot generation code\n\ndef generate_table(results):\n    return {\n        \"Parameter\": [\"Onset\", \"Offset\", \"Excursion\"],\n        \"Value\": [results['onset'], results['offset'], results['position'].sum()]\n    }\n\n# Define the App\napp = App(app_ui, server)\n\n", "type": "text"}, {"name": "fcn_thelen_muscle.py", "content": "import numpy as np\n\ndef thelen_muscle(onoff, freq, excursion, L0, F0, Vx, af, tau_a, tau_d, path):\n    onset, offset = onoff\n    dt = 0.001 / freq\n    V0 = Vx * L0\n    penn0 = 0.087\n    w = L0 * np.sin(penn0)\n    \n    # Cycle time and position\n    t = np.arange(0, 1.25 / freq, dt)\n    position = excursion * np.sin(2 * np.pi * freq * t)\n    \n    return {\n        \"position\": position,\n        \"onset\": onset,\n        \"offset\": offset,\n        \"time\": t\n    }\n", "type": "text"}, {"name": "fcn_thelen_opt.py", "content": "import numpy as np\nfrom fcn_thelen_muscle import thelen_muscle\n\ndef thelen_muscle_opt(onoff, freq, excursion, L0, F0, Vx, af, tau_a, tau_d, path):\n    # Narrow the optimization range to speed up calculation\n    on_range = np.arange(20, 23)  # Reduced range\n    off_range = np.arange(26, 30)  # Reduced range\n    opt = np.array(np.meshgrid(on_range, off_range)).T.reshape(-1, 2)\n    \n    # Calculate power for each combination\n    power = np.array([thelen_muscle(row, freq, excursion, L0, F0, Vx, af, tau_a, tau_d, path=\"b\") for row in opt])\n    \n    # Optimized solution\n    max_power_idx = np.argmax([p['position'].sum() for p in power])\n    opt_sln = np.append(opt[max_power_idx], power[max_power_idx])\n    \n    return thelen_muscle(opt_sln[:2], freq, excursion, L0, F0, Vx, af, tau_a, tau_d, \"a\")\n", "type": "text"}]