[{"name": "app.py", "content": "from shiny import App, ui, render, reactive\nimport matplotlib.pyplot as plt\nfrom thelen_muscle import thelen_muscle\nfrom thelen_optimization import thelen_muscle_opt\n\ndef app_ui():\n    return ui.page_fluid(\n        ui.h2(\"Virtual Muscle Lab\"),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_slider(\"onset\", \"Onset (% of cycle)\", min=20, max=25, value=22),\n                ui.input_slider(\"offset\", \"Offset (% of cycle)\", min=26, max=75, value=50),\n                ui.input_slider(\"freq\", \"Frequency (Hz)\", min=1, max=10, value=5),\n                ui.input_slider(\"excursion\", \"Excursion (mm)\", min=1, max=100, value=50),\n                ui.input_slider(\"L0\", \"Initial length (L0)\", min=0.1, max=2.0, value=1.0),\n                ui.input_slider(\"F0\", \"Max force (F0)\", min=1, max=200, value=100),\n                ui.input_slider(\"Vx\", \"Velocity (Vx)\", min=0.1, max=10, value=1.0),\n                ui.input_slider(\"af\", \"Activation frequency\", min=0.1, max=5.0, value=1.0),\n                ui.input_slider(\"tau_a\", \"Activation time constant\", min=0.01, max=0.1, value=0.05),\n                ui.input_slider(\"tau_d\", \"Deactivation time constant\", min=0.01, max=0.1, value=0.05),\n                ui.input_action_button(\"runsim\", \"Run Simulation\")\n            ),\n            ui.panel_main(\n                ui.output_plot(\"muscle_plot\"),\n                ui.output_text_verbatim(\"muscle_output\")\n            )\n        )\n    )\n\ndef server(input, output, session):\n    @reactive.event(input.runsim)\n    def muscle_data():\n        return thelen_muscle(\n            input.onset(), input.offset(), input.freq(), input.excursion(),\n            input.L0(), input.F0(), input.Vx(), input.af(), input.tau_a(), input.tau_d(), \"a\"\n        )\n\n    @reactive.event(input.runsim)\n    def optimized_data():\n        return thelen_muscle_opt(\n            [input.onset(), input.offset()], input.freq(), input.excursion(),\n            input.L0(), input.F0(), input.Vx(), input.af(), input.tau_a(), input.tau_d(), \"opt\"\n        )\n\n    @output\n    @render.plot\n    def muscle_plot():\n        plt.figure()\n        plt.plot(muscle_data(), label=\"Muscle Simulation\")\n        plt.plot(optimized_data(), label=\"Optimized Simulation\", linestyle='--')\n        plt.title(\"Muscle Simulation & Optimization\")\n        plt.xlabel(\"Time\")\n        plt.ylabel(\"Force / Power\")\n        plt.legend()\n        return plt\n\n    @output\n    @render.text\n    def muscle_output():\n        return \"Simulation completed with current parameters.\"\n\n# Run the app using Shiny for Python\napp = App(app_ui, server)\n\n", "type": "text"}, {"name": "thelen_muscle.py", "content": "import numpy as np\n\n# Thelen 2003 muscle model (Force-Length-Velocity with Pennation and NO tendon)\ndef thelen_muscle(onset, offset, freq, excursion, L0, F0, Vx, af, tau_a, tau_d, path):\n    time = np.linspace(0, 1, 100)  # Simulated time points\n    # Simplified muscle force model using sine wave to simulate oscillating force\n    force = F0 * np.sin(2 * np.pi * freq * time) * (onset / 100) * (offset / 100)  # Example force curve calculation\n    return force\n", "type": "text"}, {"name": "thelen_optimization.py", "content": "import numpy as np\n\n# Optimization of Thelen 2003 muscle model (Maximize net work)\ndef thelen_muscle_opt(onoff, freq, excursion, L0, F0, Vx, af, tau_a, tau_d, path):\n    onset, offset = onoff  # Unpack the onset/offset\n    time = np.linspace(0, 1, 100)  # Simulated time points\n    # Simplified power optimization model\n    power = (F0 * np.sin(2 * np.pi * freq * time) * (onset / 100) * (offset / 100)) ** 2  # Placeholder for power calculation\n    return power\n\n", "type": "text"}]