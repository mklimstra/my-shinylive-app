[{"name": "app.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny.express import ui, input, render\nfrom fcn_thelen_opt import thelen_muscle_opt\nfrom fcn_thelen_muscle import thelen_muscle\n\n# Define UI with sliders for inputs\nwith ui.sidebar():\n    ui.input_slider(\"force\", \"Force\", 0, 100, 50)\n    ui.input_slider(\"frequency\", \"Frequency\", 1, 10, 5)\n    ui.input_slider(\"excursion\", \"Excursion\", 1, 100, 50)\n    ui.input_slider(\"L0\", \"Muscle Length (L0)\", 1, 10, 5)\n    ui.input_slider(\"F0\", \"Muscle Force (F0)\", 1, 100, 50)\n    ui.input_slider(\"Vx\", \"Velocity Constant (Vx)\", 1, 10, 5)\n    ui.input_slider(\"af\", \"Activation Function (af)\", 0.1, 2.0, 1.0)\n    ui.input_slider(\"tau_a\", \"Activation Time Constant (tau_a)\", 1, 100, 50)\n    ui.input_slider(\"tau_d\", \"Deactivation Time Constant (tau_d)\", 1, 100, 50)\n    ui.input_action_button(\"optimize\", \"Run Optimization\")\n\n# Reactive plot based on the Thelen muscle model\n@render.plot(alt=\"Muscle Simulation Plot\")\ndef musclePlot():\n    # Get input values from the UI\n    force = input.force()\n    frequency = input.frequency()\n    excursion = input.excursion()\n    L0 = input.L0()\n    F0 = input.F0()\n    Vx = input.Vx()\n    af = input.af()\n    tau_a = input.tau_a()\n    tau_d = input.tau_d()\n\n    # Call the Thelen muscle optimization function when the button is clicked\n    if input.optimize():\n        results = thelen_muscle_opt(\n            onoff=(20, 75),\n            freq=frequency,\n            excursion=excursion,\n            L0=L0,\n            F0=F0,\n            Vx=Vx,\n            af=af,\n            tau_a=tau_a,\n            tau_d=tau_d,\n            path=\"a\"\n        )\n    else:\n        results = thelen_muscle(\n            onoff=(20, 75),\n            freq=frequency,\n            excursion=excursion,\n            L0=L0,\n            F0=F0,\n            Vx=Vx,\n            af=af,\n            tau_a=tau_a,\n            tau_d=tau_d,\n            path=\"a\"\n        )\n\n    # Generate the plot from the results\n    t = results['time']\n    position = results['position']\n    \n    # Plot the position over time\n    plt.plot(t, position, label=\"Muscle Position\")\n    plt.xlabel(\"Time (s)\")\n    plt.ylabel(\"Position (m)\")\n    plt.title(\"Muscle Simulation\")\n    plt.legend()\n\n# Reactive table showing the muscle parameters\n@render.table\ndef muscleTable():\n    # Get input values from the UI to display in the table\n    return {\n        \"Parameter\": [\"Force\", \"Frequency\", \"Excursion\", \"L0\", \"F0\", \"Vx\", \"af\", \"tau_a\", \"tau_d\"],\n        \"Value\": [input.force(), input.frequency(), input.excursion(), input.L0(), input.F0(), input.Vx(), input.af(), input.tau_a(), input.tau_d()]\n    }\n\n", "type": "text"}, {"name": "fcn_thelen_muscle.py", "content": "import numpy as np\n\ndef thelen_muscle(onoff, freq, excursion, L0, F0, Vx, af, tau_a, tau_d, path):\n    onset, offset = onoff\n    dt = 0.001 / freq\n    V0 = Vx * L0\n    penn0 = 0.087\n    w = L0 * np.sin(penn0)\n    \n    # Cycle time and position\n    t = np.arange(0, 1.25 / freq, dt)\n    position = excursion * np.sin(2 * np.pi * freq * t)\n    \n    return {\n        \"position\": position,\n        \"onset\": onset,\n        \"offset\": offset,\n        \"time\": t\n    }\n", "type": "text"}, {"name": "fcn_thelen_opt.py", "content": "import numpy as np\nfrom fcn_thelen_muscle import thelen_muscle\n\ndef thelen_muscle_opt(onoff, freq, excursion, L0, F0, Vx, af, tau_a, tau_d, path):\n    # Narrow the optimization range to speed up calculation\n    on_range = np.arange(20, 23)  # Reduced range\n    off_range = np.arange(26, 30)  # Reduced range\n    opt = np.array(np.meshgrid(on_range, off_range)).T.reshape(-1, 2)\n    \n    # Calculate power for each combination\n    power = np.array([thelen_muscle(row, freq, excursion, L0, F0, Vx, af, tau_a, tau_d, path=\"b\") for row in opt])\n    \n    # Optimized solution\n    max_power_idx = np.argmax([p['position'].sum() for p in power])\n    opt_sln = np.append(opt[max_power_idx], power[max_power_idx])\n    \n    return thelen_muscle(opt_sln[:2], freq, excursion, L0, F0, Vx, af, tau_a, tau_d, \"a\")\n", "type": "text"}]