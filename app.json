[{"name": "app.py", "content": "from shinyexpress import App, ui\nimport matplotlib.pyplot as plt\nfrom thelen_muscle import thelen_muscle\nfrom thelen_optimization import thelen_muscle_opt\n\ndef app():\n    # User Interface (UI) - Equivalent to the original R Shiny UI\n    onset = ui.slider(\"Onset (% of cycle)\", min=20, max=25, value=22)\n    offset = ui.slider(\"Offset (% of cycle)\", min=26, max=75, value=50)\n    freq = ui.slider(\"Frequency (Hz)\", min=1, max=10, value=5)\n    excursion = ui.slider(\"Excursion (mm)\", min=1, max=100, value=50)\n    L0 = ui.slider(\"Initial length (L0)\", min=0.1, max=2.0, value=1.0)\n    F0 = ui.slider(\"Max force (F0)\", min=1, max=200, value=100)\n    Vx = ui.slider(\"Velocity (Vx)\", min=0.1, max=10, value=1.0)\n    af = ui.slider(\"Activation frequency\", min=0.1, max=5.0, value=1.0)\n    tau_a = ui.slider(\"Activation time constant\", min=0.01, max=0.1, value=0.05)\n    tau_d = ui.slider(\"Deactivation time constant\", min=0.01, max=0.1, value=0.05)\n\n    # Buttons\n    run_simulation = ui.button(\"Run Simulation\")\n\n    # On button click, run the simulation and plot the results\n    if run_simulation:\n        # Run Thelen muscle simulation based on input values\n        muscle_data = thelen_muscle(onset.value, offset.value, freq.value, excursion.value, L0.value, F0.value, Vx.value, af.value, tau_a.value, tau_d.value, \"a\")\n\n        # Run Thelen optimization (optional)\n        optimized_data = thelen_muscle_opt([onset.value, offset.value], freq.value, excursion.value, L0.value, F0.value, Vx.value, af.value, tau_a.value, tau_d.value, \"opt\")\n\n        # Plot the results\n        plt.figure()\n        plt.plot(muscle_data, label=\"Muscle Simulation\")\n        plt.plot(optimized_data, label=\"Optimized Simulation\", linestyle='--')\n        plt.title(\"Muscle Simulation & Optimization\")\n        plt.xlabel(\"Time\")\n        plt.ylabel(\"Force / Power\")\n        plt.legend()\n        plt.show()\n\n# Run the app using Shiny Express (optimized for ShinyLive)\nApp(app).run()\n\n", "type": "text"}, {"name": "thelen_muscle.py", "content": "import numpy as np\n\n# Thelen 2003 muscle model (Force-Length-Velocity with Pennation and NO tendon)\ndef thelen_muscle(onset, offset, freq, excursion, L0, F0, Vx, af, tau_a, tau_d, path):\n    time = np.linspace(0, 1, 100)  # Simulated time points\n    # Simplified muscle force model using sine wave to simulate oscillating force\n    force = F0 * np.sin(2 * np.pi * freq * time) * (onset / 100) * (offset / 100)  # Example force curve calculation\n    return force\n", "type": "text"}, {"name": "thelen_opt.py", "content": "import numpy as np\n\n# Optimization of Thelen 2003 muscle model (Maximize net work)\ndef thelen_muscle_opt(onoff, freq, excursion, L0, F0, Vx, af, tau_a, tau_d, path):\n    onset, offset = onoff  # Unpack the onset/offset\n    time = np.linspace(0, 1, 100)  # Simulated time points\n    # Simplified power optimization model\n    power = (F0 * np.sin(2 * np.pi * freq * time) * (onset / 100) * (offset / 100)) ** 2  # Placeholder for power calculation\n    return power\n", "type": "text"}]